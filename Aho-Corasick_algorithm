from collections import deque
from collections import  defaultdict
_end = '_end_'


class Edge:

    def __init__(self, from_node, to_node, value):
        self.from_node = from_node
        self.to_node = to_node
        self.value = value


    def __repr__(self):
        return "Krawędź({},{}) - {}".format(repr(self.from_node), repr(self.to_node), repr(self.value))


class Trie:

    def __init__(self, words):
        self._nodes = {} #storage of vertices with failinks
        self._edges = {} #storing the order
        self.biggest_node = 0
        self._stop = list()

        self._edges[0] = {}
        for word in words:
            self.add_word(word)

    def add_word(self, word): 
        current_node = 0
        was_before = False
        for w in word:
            if w in self._edges[current_node]:
                current_node = self._edges[current_node][w]
                was_before = True
            else:
                if was_before:
                    self._edges[current_node][w] = self.biggest_node + 1
                    current_node += self.biggest_node
                    was_before = False
                else:
                    self._edges[current_node][w] = {}
                    self._edges[current_node][w] = self.biggest_node + 1
                    if current_node == 0:
                        current_node = self.biggest_node
                    current_node += 1
                if current_node > self.biggest_node:
                    self.biggest_node = current_node
                if current_node not in self._edges:
                    self._edges[current_node] = {}
        self._edges[current_node][_end] = word
        self._stop.append(current_node)

    def fail_links(self):
        neightbourhood = deque()
        neightbourhood.append(0)
        to_visit = deque()
        to_visit.append(0)
        visited = deque()
        visit0 = to_visit.popleft()
        self._nodes[visit0] = {}
        self._nodes[visit0] = visit0
        for n in self._edges[visit0]:
            self._nodes[self._edges[visit0][n]] = {}
            self._nodes[self._edges[visit0][n]] = visit0
            to_visit.append(self._edges[visit0][n])
            visited.append(n)

        while to_visit:
            visit = to_visit.popleft()
            for n in self._edges[visit]:
                if n is not _end:
                    neightbourhood.append(self._edges[visit][n])
                    to_visit.append(self._edges[visit][n])
                previous_node = visit
                edge_value = n
                current_node = self._edges[visit][n]
                if edge_value in self._edges[self._nodes[previous_node]]:
                    self._nodes[current_node] = self._edges[self._nodes[previous_node]][edge_value]
                else:
                    self._nodes[current_node] = visit0
        return neightbourhood

    def search(self, word):
        node = 0
        result = defaultdict(list)
        pattern = list()
        for i in range(len(word)):
            letter = word[i]

            while letter not in self._edges[node] and node != 0:
                node = self._nodes[node]

            if letter not in self._edges[node]:
                node = 0
                continue

            pattern.append(letter)
            node = self._edges[node][letter]

            if node in self._stop:
                res = self._edges[node][_end]
                result[res].append(i - len(res) + 1)

        return result

    def __repr__(self):
        return "\n Tree" + "\n" +repr(self._edges)+ "\n \n" +"Failinks- {node : failink} " + "\n" + repr(self._nodes) 


if __name__ == '__main__':
    print("hello")
    trie = Trie(["ABC", "AAB", "CBA"])

    print(trie.fail_links())
    print(trie)
    print("\n Patterns and the index of their occurrence in the text: ")
    print(trie.search("ABCAABCBA"))


#end
